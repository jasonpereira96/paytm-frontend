{"version":3,"sources":["components/Header.js","constants/constants.js","utils/utils.js","actions/actions.js","data/data.js","actions/async_actions.js","components/snackbar/ErrorSnackbar.js","components/panels/UploadPanel.js","components/panels/ListPanel.js","components/UploadScreen.js","components/DisplayScreen.js","App.js","reducers/uploadPanel.js","reducers/listPanel.js","reducers/uploadScreen.js","reducers/displayScreen.js","reducers/screen.js","reducers/index.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","Header","classes","className","AppBar","position","Toolbar","Typography","variant","BASE_URL","checkFile","fileInput","Promise","resolve","reject","files","length","ok","reason","file","Math","round","size","then","data","reader","FileReader","addEventListener","image","Image","src","result","onload","height","width","readAsDataURL","checkFileDimensions","imagesAdded","images","type","errorOccured","error","uploadFileToServer","a","formData","FormData","append","axios","post","headers","getLinks","id","get","params","uploadFailure","dispatch","_uploadFailure","setTimeout","Alert","props","elevation","marginTop","ErrorSnackbar","open","message","Snackbar","autoHideDuration","onClose","event","severity","UploadPanel","onUploadButtonClick","bind","onFileChange","this","Fab","color","aria-label","component","style","display","onChange","accept","fileName","Button","onClick","uploading","CircularProgress","document","getElementById","snackbarClose","uploadFile","console","log","fileChanged","React","Component","connect","state","uploadScreen","uploadPanel","name","response","uploadSuccess","ListPanel","onImageTitleClick","List","map","ListItem","button","key","ListItemIcon","ListItemText","primary","fetch","json","catch","e","imageTitleClick","listPanel","loading","UploadScreen","DisplayScreen","onBack","sources","record","horizontal","vertical","horizontal_small","gallery","back","requestLinks","displayScreen","screen","initialState","action","concat","combineReducers","Boolean","window","location","hostname","match","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","rootReducer","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.423e0568.chunk.js","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n    },\n    menuButton: {\n        marginRight: theme.spacing(2),\n    },\n    title: {\n        flexGrow: 1,\n    },\n}));\n\nexport default function Header() {\n    const classes = useStyles();\n\n    return (\n        <div className={classes.root}>\n            <AppBar position=\"static\">\n                <Toolbar>\n                    <Typography variant=\"h6\" className={classes.title}>\n                        Image Upload Assignment\n                    </Typography>\n                </Toolbar>\n            </AppBar>\n        </div>\n    );\n}\n","export const MAX_FILE_SIZE = 2000;\nexport const ALLOWED_FILE_WIDTH = 1024;\nexport const ALLOWED_FILE_HEIGHT = 1024;\nexport const SNACKBAR_CLOSE_TIME = 2500;\nexport const BASE_URL = 'http://localhost:5000';","import { MAX_FILE_SIZE, ALLOWED_FILE_HEIGHT, ALLOWED_FILE_WIDTH } from './../constants/constants';\n\nexport function checkFile(fileInput) {\n    return new Promise(function (resolve, reject) {\n        if (fileInput.files.length === 0) {\n            resolve({\n                ok: false, reason: 'No file selected'\n            });\n        }\n\n        const file = fileInput.files[0];\n        const fileSize = Math.round(file.size / 1024);\n\n        if (fileSize > MAX_FILE_SIZE) {\n            resolve({\n                ok: false, reason: 'File too big'\n            });\n        }\n        resolve({\n            ok: true\n        });\n    }).then(data => {\n        if (!data.ok) {\n            return data;\n        } else {\n            return checkFileDimensions(fileInput);\n        }\n    });\n}\n\nexport function checkFileDimensions(fileInput) {\n    let file = fileInput.files[0];\n\n    return new Promise(function (resolve, reject) {\n        const reader = new FileReader();\n        reader.addEventListener(\"load\", function () {\n            var image = new Image();\n            image.src = reader.result;\n            image.onload = function () {\n                if (image.height === ALLOWED_FILE_WIDTH && image.width === ALLOWED_FILE_HEIGHT) {\n                    resolve({\n                        ok: true\n                    });\n                } else {\n                    resolve({\n                        ok: false, reason: `Incorrect dimensions. Should be ${ALLOWED_FILE_WIDTH} x ${ALLOWED_FILE_HEIGHT}`\n                    });\n                }\n            }\n        }, false);\n        reader.readAsDataURL(file);\n    });\n}","export const IMAGES_ADDED = 'IMAGES_ADDED';\nexport const FILE_CHANGED = 'FILE_CHANGED';\nexport const ERROR_OCCURED = 'ERROR_OCCURED';\nexport const SNACKBAR_CLOSE = 'SNACKBAR_CLOSE';\nexport const UPLOAD_FILE = 'UPLOAD_FILE';\nexport const START_UPLOAD = 'START_UPLOAD';\nexport const UPLOAD_SUCCESS = 'UPLOAD_SUCCESS';\nexport const UPLOAD_FAILURE = 'UPLOAD_FAILURE';\nexport const BACK = 'BACK';\nexport const IMAGE_TITLE_CLICK = 'IMAGE_TITLE_CLICK';\nexport const REQUEST_LINKS = 'REQUEST_LINKS';\nexport const REQUEST_LINKS_STARTED = 'REQUEST_LINKS_STARTED';\nexport const RECEIVED_LINKS = 'RECEIVED_LINKS';\nexport const RECEIVED_LINKS_ERROR = 'RECEIVED_LINKS_ERROR';\n\n\nexport const imagesAdded = images => {\n    return {\n        type: IMAGES_ADDED,\n        images\n    };\n};\n\nexport const fileChanged = file => {\n    return {\n        type: FILE_CHANGED,\n        file\n    };\n}\n\nexport const errorOccured = error => {\n    return {\n        type: ERROR_OCCURED,\n        error\n    };\n}\nexport const snackbarClose = () => {\n    return {\n        type: SNACKBAR_CLOSE\n    };\n}\nexport const startUpload = () => {\n    return {\n        type: START_UPLOAD\n    };\n}\nexport const uploadSuccess = (fileId, fileName) => {\n    return {\n        type: UPLOAD_SUCCESS,\n        id: fileId,\n        name: fileName\n    };\n}\nexport const uploadFailure = (error) => {\n    return {\n        type: UPLOAD_FAILURE,\n        error\n    };\n}\nexport const back = () => {\n    return {\n        type: BACK\n    };\n}\nexport const imageTitleClick = id => {\n    return {\n        type: IMAGE_TITLE_CLICK,\n        id\n    };\n}\nexport const requestLinksStarted = () => {\n    return {\n        type: REQUEST_LINKS_STARTED\n    };\n}\nexport const receivedLinks = record => {\n    return {\n        type: RECEIVED_LINKS, \n        record\n    };\n} \nexport const receivedLinksError = () => {\n    return {\n        type: RECEIVED_LINKS_ERROR\n    };\n}","import axios from 'axios';\nimport { BASE_URL } from './../constants/constants';\n\nasync function uploadFileToServer(file) {\n    let formData = new FormData();\n    formData.append(\"file\", file);\n\n    return axios.post(`${BASE_URL}/upload`, formData, {\n        headers: {\n            'Content-Type': 'multipart/form-data'\n        }\n    });\n}\nasync function getLinks(id) {\n    return axios.get(`${BASE_URL}/image`, {\n        params: {\n            id\n        }\n    });\n}\nexport {\n    uploadFileToServer,\n    getLinks\n};","import { startUpload, uploadSuccess, uploadFailure as _uploadFailure, imagesAdded, snackbarClose } from './actions';\nimport { requestLinksStarted, receivedLinks, receivedLinksError } from './actions';\nimport { getLinks, uploadFileToServer } from './../data/data';\nimport { SNACKBAR_CLOSE_TIME } from '../constants/constants';\n\nexport function uploadFile(file) {\n    return async function (dispatch) {\n        dispatch(startUpload());\n        try {\n            let response = await uploadFileToServer(file);\n            let data = response.data;\n            console.log(data);\n            if (!data.error) {\n                dispatch(uploadSuccess());\n                dispatch(imagesAdded([{\n                    id: data.id, name: data.name\n                }]));\n            } else {\n                dispatch(uploadFailure(data.error));\n            }\n        } catch (e) {\n            dispatch(uploadFailure(e));\n        }\n    }\n};\n\nexport function requestLinks(id) {\n    return async function (dispatch) {\n        dispatch(requestLinksStarted(id));\n        try {\n            let response = await getLinks(id);\n            let data = response.data;\n            console.log(data);\n            if (!data.error) {\n                dispatch(receivedLinks(data));\n            } else {\n                dispatch(receivedLinksError());\n            }\n        } catch (e) {\n            dispatch(receivedLinksError());\n        }\n    }\n}\n\nexport function uploadFailure(error) {\n    return function (dispatch) {\n        dispatch(_uploadFailure(error)); //synchronous action\n        setTimeout(() => {\n            dispatch(snackbarClose());\n        }, SNACKBAR_CLOSE_TIME);\n    }\n}","import React from 'react';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport MuiAlert from '@material-ui/lab/Alert';\nimport { makeStyles } from '@material-ui/core/styles';\n\nfunction Alert(props) {\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        width: '100%',\n        '& > * + *': {\n            marginTop: theme.spacing(2),\n        },\n    },\n}));\n\nexport default function ErrorSnackbar(props) {\n    const classes = useStyles();\n    const { open, message } = props;\n    \n    const handleClose = (event, reason) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n    };\n\n    return (\n        <div className={classes.root}>\n            <Snackbar open={open} autoHideDuration={2000} onClose={handleClose}>\n                <Alert severity=\"error\">\n                    {message}\n                </Alert>\n            </Snackbar>\n        </div>\n    );\n}\n","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Fab from '@material-ui/core/Fab';\nimport { Typography } from '@material-ui/core';\nimport AddIcon from '@material-ui/icons/Add';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { checkFile } from './../../utils/utils';\nimport { fileChanged, errorOccured, snackbarClose } from './../../actions/actions';\nimport { SNACKBAR_CLOSE_TIME } from './../../constants/constants';\nimport { uploadFile } from './../../actions/async_actions';\nimport { connect } from 'react-redux';\nimport ErrorSnackbar from './../snackbar/ErrorSnackbar';\n\nclass UploadPanel extends React.Component {\n    constructor(props) {\n        super(props);\n        this.onUploadButtonClick = this.onUploadButtonClick.bind(this);\n        this.onFileChange = this.onFileChange.bind(this);\n    }\n    render() {\n        let { error } = this.props;\n        return (\n            <>\n                <div className='upload-panel-section'>\n                    <Fab variant=\"extended\" color=\"primary\" aria-label=\"add\" component='label'>\n                        <AddIcon />\n                    Choose File\n                    <input type=\"file\" style={{ display: \"none\" }} id='file-input' onChange={this.onFileChange} accept='image/*' />\n                    </Fab>\n                    <br/>\n                    <br/>\n                    <Typography variant=\"h5\" component=\"h5\">\n                        {this.props.fileName}\n                    </Typography>\n                </div>\n                <div className='upload-panel-section'>\n                    <Button variant=\"contained\" color=\"primary\" onClick={this.onUploadButtonClick}>\n                        Upload\n                </Button>\n                </div>\n                <div className= 'upload-panel-section' id='loading-section'>\n                    {this.props.uploading ? <><CircularProgress /><br />Loading...</> : <br />}\n                </div>\n                <ErrorSnackbar open={error !== null} message={error} />\n            </>\n        );\n    }\n    async onUploadButtonClick() {\n        const fileInput = document.getElementById('file-input');\n        let { errorOccured, snackbarClose, uploadFile } = this.props;\n        let { ok, reason } = await checkFile(fileInput);\n        let file = fileInput.files[0];\n        if (ok) {\n            //dispatch action\n            uploadFile(file);\n        } else {\n            //dispatch action\n            console.log(reason);\n            errorOccured(reason);\n            setTimeout(() => snackbarClose(), SNACKBAR_CLOSE_TIME);\n        }\n    }\n    onFileChange() {\n        const fileInput = document.getElementById('file-input');\n        let { fileChanged } = this.props;\n\n        if (fileInput.files.length === 0) {\n            //dispatch action\n            fileChanged(null);\n\n        } else {\n            const file = fileInput.files[0];\n            //dispatch action\n            fileChanged(file);\n        }\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        fileChanged: file => dispatch(fileChanged(file)),\n        errorOccured: error => dispatch(errorOccured(error)),\n        snackbarClose: () => dispatch(snackbarClose()),\n        uploadFile: file => dispatch(uploadFile(file))\n    };\n};\n\nconst mapStateToProps = state => {\n    let { file, error, uploading } = state.uploadScreen.uploadPanel;\n    let fileName = file ? file.name : null;\n    return {\n        fileName,\n        error,\n        uploading\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UploadPanel);\n","import React from 'react';\nimport { connect } from 'react-redux'\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ImageIcon from '@material-ui/icons/Image';\nimport { errorOccured, imagesAdded, imageTitleClick, snackbarClose } from './../../actions/actions';\nimport { CircularProgress } from '@material-ui/core';\nimport { SNACKBAR_CLOSE_TIME } from './../../constants/constants';\n\nclass ListPanel extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.onImageTitleClick = this.onImageTitleClick.bind(this);\n    }\n    render() {\n        let { onImageTitleClick } = this;\n        let { images } = this.props;\n\n        if (images.length === 0) {\n            return <div id='cp-div'><CircularProgress /></div>;\n        }\n\n        return (\n            <div>\n                <List component=\"nav\" aria-label=\"main mailbox folders\">\n                    {images.map(image => {\n                        return (<ListItem button key={image.id} onClick={() => onImageTitleClick(image.id)}>\n                            <ListItemIcon>\n                                <ImageIcon />\n                            </ListItemIcon>\n                            <ListItemText primary={`${image.name ? image.name : 'Image-' + image.id}`} />\n                        </ListItem>);\n                    })}\n                </List>\n            </div>\n        );\n    }\n    componentDidMount() {\n        let { images, errorOccured, snackbarClose } = this.props;\n        if (images.length === 0) {\n            fetch('http://localhost:5000/images')\n                .then(response => response.json())\n                .then(json => {\n                    this.props.imagesAdded(json.images);\n                })\n                .catch(e => {\n                    console.log(e);\n                    errorOccured('Failed to fetch images');\n                    setTimeout(() => snackbarClose(), SNACKBAR_CLOSE_TIME);\n                });\n        }\n    }\n    onImageTitleClick(id) {\n        console.log(`image id: ${id}`);\n        this.props.imageTitleClick(id);\n    }\n}\nconst mapStateToProps = state => {\n    return {\n        images: state.uploadScreen.listPanel.images,\n        loading: state.uploadScreen.listPanel.loading,\n    };\n};\nconst mapDispatchToProps = dispatch => {\n    return {\n        imagesAdded: images => dispatch(imagesAdded(images)),\n        imageTitleClick: id => dispatch(imageTitleClick(id)),\n        errorOccured: error => dispatch(errorOccured(error)),\n        snackbarClose: () => dispatch(snackbarClose())\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ListPanel);","import React from 'react';\nimport Header from './Header';\nimport UploadPanel from './panels/UploadPanel';\nimport ListPanel from './panels/ListPanel';\n\nclass UploadScreen extends React.Component {\n    render() {\n        return <>\n            <Header></Header>\n            <div className='upload-screen-holder'>\n                <div id='upload-panel'>\n                    <UploadPanel></UploadPanel>\n                </div>\n                <div id='list-panel'>\n                    <ListPanel></ListPanel>\n                </div>\n            </div>\n        </>\n    }\n}\n\nexport default UploadScreen;","import React from 'react';\nimport Header from './../components/Header';\nimport { Button, Typography } from '@material-ui/core';\nimport { back } from './../actions/actions';\nimport { connect } from 'react-redux';\nimport { requestLinks } from '../actions/async_actions';\nimport { BASE_URL } from './../constants/constants';\n\nclass DisplayScreen extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.onBack = this.onBack.bind(this);\n    }\n    render() {\n        let { record } = this.props;\n        let { onBack } = this;\n        let src = `${BASE_URL}/static/loading.gif`;\n        let sources;\n        if (record) {\n            sources = [\n                record.horizontal,\n                record.vertical,\n                record.horizontal_small,\n                record.gallery,\n            ];\n        } else {\n            sources = [src, src, src, src];\n        }\n        return (<>\n            <Header></Header>\n            <div id='back-div'>\n                <Button variant=\"contained\" color=\"primary\" onClick={onBack}>\n                    Back\n                </Button>\n            </div>\n            <div id='display-screen'>\n                <Typography variant='h5'>Horizontal</Typography>\n                <div className='image-row'>\n                    <img src={sources[0]} className='image' />\n                </div>\n                <Typography variant='h5'>Vertical</Typography>\n                <div className='image-row'>\n                    <img src={sources[1]} className='image' />\n                </div>\n                <Typography variant='h5'>Horizontal Small</Typography>\n                <div className='image-row'>\n                    <img src={sources[2]} className='image' />\n                </div>\n                <Typography variant='h5'>Gallery</Typography>\n                <div className='image-row'>\n                    <img src={sources[3]} className='image' />\n                </div>\n                \n            </div>\n        </>);\n    }\n    onBack() {\n        this.props.back();\n    }\n    componentDidMount() {\n        let { id, requestLinks } = this.props;\n        requestLinks(id);\n    }\n}\nconst mapStateToProps = state => {\n    let { record, id } = state.displayScreen;\n    return {\n        record, id\n    };\n}\nconst mapDispatchToProps = dispatch => {\n    return {\n        back: () => dispatch(back()),\n        requestLinks: id => dispatch(requestLinks(id))\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DisplayScreen);","import React from 'react';\nimport './App.css';\nimport UploadScreen from './components/UploadScreen';\nimport DisplayScreen from './components/DisplayScreen';\nimport { connect } from 'react-redux';\n\n\nfunction App(props) {\n    let { screen } = props;\n    if (screen === 'upload') {\n        return <>\n            <UploadScreen></UploadScreen>\n        </>;\n    } else {\n        return <>\n            <DisplayScreen></DisplayScreen>\n        </>;\n    }\n}\n\nconst mapStateToProps = state => {\n    let { screen } = state;\n    return {\n        screen\n    };\n}\nexport default connect(mapStateToProps)(App);","import {\n    FILE_CHANGED, ERROR_OCCURED, SNACKBAR_CLOSE,\n    UPLOAD_SUCCESS, UPLOAD_FAILURE, START_UPLOAD\n} from './../actions/actions';\n\nlet initialState = {\n    error: null,\n    uploading: false,\n    file: null\n};\nconst uploadPanel = (uploadPanel = initialState, action) => {\n    switch (action.type) {\n        case FILE_CHANGED: {\n            return {\n                ...uploadPanel,\n                file: action.file\n            };\n        }\n        case ERROR_OCCURED: {\n            return {\n                ...uploadPanel,\n                error: action.error\n            };\n        }\n        case SNACKBAR_CLOSE: {\n            return {\n                ...uploadPanel,\n                error: null\n            };\n        }\n        case START_UPLOAD: {\n            return {\n                ...uploadPanel,\n                uploading: true\n            };\n        }\n        case UPLOAD_SUCCESS: {\n            return {\n                ...uploadPanel,\n                uploading: false\n            }\n        }\n        case UPLOAD_FAILURE: {\n            return {\n                ...uploadPanel,\n                error: action.error || \"File wasn't uploaded\",\n                uploading: false\n            };\n        }\n    }\n    return uploadPanel;\n}\n\nexport default uploadPanel;","import { IMAGES_ADDED } from './../actions/actions';\n\nlet initialState = {\n    images: [],\n    loading: true\n};\n\nconst listPanel = (listPanel = initialState, action) => {\n    if (action.type === IMAGES_ADDED) {\n        return {\n            ...listPanel,\n            images: listPanel.images.concat(action.images),\n            loading: false\n        };\n    } else {\n        return listPanel;\n    }\n}\n\nexport default listPanel;","import { combineReducers } from 'redux';\nimport uploadPanel from './uploadPanel';\nimport listPanel from './listPanel';\n\nexport default combineReducers({\n    uploadPanel, listPanel\n});","import { IMAGE_TITLE_CLICK, RECEIVED_LINKS } from './../actions/actions';\n\nlet initialState = {\n    id: null,\n    record: null\n};\n\nconst displayScreen = (displayScreen = initialState, action) => {\n    switch (action.type) {\n        case IMAGE_TITLE_CLICK: {\n            return {\n                ...displayScreen,\n                id: action.id,\n                record: null\n            };\n        }\n        case RECEIVED_LINKS: {\n            return {\n                ...displayScreen,\n                record: action.record\n            };\n        }\n    }\n    return displayScreen;\n}\n\nexport default displayScreen;","import { BACK, IMAGE_TITLE_CLICK } from './../actions/actions';\n\nlet initialState = 'upload';\n\nconst screen = (screen = initialState, action) => {\n    switch (action.type) {\n        case BACK: {\n            return 'upload'\n        }\n        case IMAGE_TITLE_CLICK: {\n            return 'display'\n        }\n    }\n    return screen;\n}\n\nexport default screen;","import { combineReducers } from 'redux';\nimport uploadScreen from './uploadScreen';\nimport displayScreen from './displayScreen';\nimport screen from './screen';\n\nexport default combineReducers({\n    uploadScreen, displayScreen, screen\n});","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './App';\nimport rootReducer from './reducers/index';\nimport * as serviceWorker from './serviceWorker';\n\nlet initialState = {\n    screen: 'upload',\n    uploadScreen: {\n        uploadPanel: {\n            error: null,\n            uploading: false,\n            file: null\n        },\n        listPanel: {\n            images: []\n        }\n    },\n    displayScreen: {\n        id: null\n    }\n};\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunkMiddleware)));\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}